name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
      continue-on-error: true
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE_URL: ${{ secrets.OPENAI_API_BASE_URL }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
        OPENAI_MAX_TOKENS: ${{ secrets.OPENAI_MAX_TOKENS }}
        OPENAI_TEMPERATURE: ${{ secrets.OPENAI_TEMPERATURE }}
        PORT: 3001
        CORS_ORIGIN: "*"
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOG_LEVEL: info
        LOG_TO_FILE: false
        DEFAULT_CONTENT_LENGTH: medium
        DEFAULT_TONE: professional
        DEFAULT_SEARCH_DEPTH: 10
        DEFAULT_RECENCY_HOURS: 24
        DEFAULT_QUALITY_THRESHOLD: 7.0
        DEFAULT_AUTO_OPTIMIZE: true
        DEFAULT_INCLUDE_ANALYTICS: true
        DEFAULT_ARTICLE_COUNT: 3
    
    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE_URL: ${{ secrets.OPENAI_API_BASE_URL }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
        OPENAI_MAX_TOKENS: ${{ secrets.OPENAI_MAX_TOKENS }}
        OPENAI_TEMPERATURE: ${{ secrets.OPENAI_TEMPERATURE }}
        PORT: 3001
        CORS_ORIGIN: "*"
        RATE_LIMIT_WINDOW_MS: 900000
        RATE_LIMIT_MAX_REQUESTS: 100
        LOG_LEVEL: info
        LOG_TO_FILE: false
        DEFAULT_CONTENT_LENGTH: medium
        DEFAULT_TONE: professional
        DEFAULT_SEARCH_DEPTH: 10
        DEFAULT_RECENCY_HOURS: 24
        DEFAULT_QUALITY_THRESHOLD: 7.0
        DEFAULT_AUTO_OPTIMIZE: true
        DEFAULT_INCLUDE_ANALYTICS: true
        DEFAULT_ARTICLE_COUNT: 3
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: |
        echo "Building AI Article Generator..."
        npm run build --if-present
    
    - name: Create deployment package
      run: |
        mkdir -p deployment
        cp -r src deployment/
        cp -r public deployment/
        cp package*.json deployment/
        cp server.js deployment/
        cp .env.example deployment/
        echo "Deployment package created"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ai-article-generator-build
        path: deployment/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true
    
    - name: Run dependency vulnerability scan
      run: |
        npx audit-ci --config .audit-ci.json
      continue-on-error: true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ai-article-generator-build
        path: deployment/
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: Deploy to Heroku, AWS, Docker, etc.
      env:
        STAGING_DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ai-article-generator-build
        path: deployment/
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: Deploy to Heroku, AWS, Docker, etc.
      env:
        PRODUCTION_DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_API_BASE_URL: ${{ secrets.OPENAI_API_BASE_URL }}
        OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ai-article-generator:latest
          ${{ secrets.DOCKER_USERNAME }}/ai-article-generator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          ðŸš€ AI Article Generator Deployment
          Status: ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
